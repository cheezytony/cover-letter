{"version":3,"sources":["store/index.ts","components/primitives/loader.tsx","components/primitives/buttons.tsx","utils/local-storage.ts","pages/CoverLetter.tsx","components/primitives/form.tsx","components/primitives/input.tsx","pages/Edit.tsx","pages/Invoice.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","position","companyName","recipient","recipientType","currentPosition","currentEmployer","referrer","referrerType","shouldSave","coverLetter","createSlice","name","reducers","clearCoverLetter","state","updateCoverLetter","action","payload","actions","configureStore","reducer","LoaderDots","className","Button","title","href","children","props","to","ButtonSuccess","ButtonSubmit","disabled","loading","type","setItem","key","value","data","JSON","stringify","localStorage","Title","Address","Salutation","Opener","renderReferrer","Body","Closer","Signature","CoverLetterPage","useSelector","dispatch","useDispatch","onClick","window","print","validationRules","nullable","test","message","required","updateField","form","field","fields","Error","validatedField","validateField","touched","errors","isValid","rules","forEach","rule","split","ruleName","ruleArguments","validationRule","valid","Form","onSubmit","formRef","useRef","useEffect","ref","FormGroup","Object","keys","map","FormLabel","Input","otherProps","InputSelect","id","placeholder","options","onChange","useState","isOpen","setIsOpen","selectedOption","setSelectedOption","option","find","op","role","selectOption","onKeyDown","InputCheckbox","checked","htmlFor","Edit","history","useHistory","formFields","createForm","updateForm","updatedFields","formField","updateFields","event","preventDefault","validatedForm","valdiateForm","values","getFormValues","push","target","newForm","Invoice","App","getItem","parse","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce6f751b.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nexport type CoverLetter = {\n  position: string\n  companyName: string\n  recipient: string\n  recipientType: 'Sir' | 'Ma' | 'Hiring Manager' | 'name'\n  currentPosition: string\n  currentEmployer: string\n  referrer: string | null\n  referrerType: string | null\n  shouldSave: boolean\n};\n\nexport type State = {\n  coverLetter: CoverLetter\n}\n\nexport const initialState: CoverLetter = {\n  position: 'Senior Backend Engineer',\n  companyName: 'CredPal',\n  recipient: 'Hiring Manager',\n  recipientType: 'Hiring Manager',\n  currentPosition: 'Full Stack Developer',\n  currentEmployer: 'CredPal',\n  referrer: null,\n  referrerType: null,\n  shouldSave: true,\n};\n\nconst coverLetter = createSlice({\n  name: 'coverLetter',\n  initialState,\n  reducers: {\n    clearCoverLetter: (state) => {\n      const {\n        position,\n        companyName,\n        recipient,\n        recipientType,\n        currentPosition,\n        currentEmployer,\n        referrer,\n        referrerType,\n        shouldSave,\n      } = initialState;\n\n      state.position = position;\n      state.companyName = companyName;\n      state.recipient = recipient;\n      state.recipientType = recipientType;\n      state.currentPosition = currentPosition;\n      state.currentEmployer = currentEmployer;\n      state.referrer = referrer;\n      state.referrerType = referrerType;\n      state.shouldSave = shouldSave;\n    },\n    updateCoverLetter: (state, action) => {\n      const {\n        position,\n        companyName,\n        recipient,\n        recipientType,\n        currentPosition,\n        currentEmployer,\n        referrer,\n        referrerType,\n        shouldSave,\n      } = action.payload || {};\n\n      state.position = position;\n      state.companyName = companyName;\n      state.recipient = recipient;\n      state.recipientType = recipientType;\n      state.currentPosition = currentPosition;\n      state.currentEmployer = currentEmployer;\n      state.referrer = referrer;\n      state.referrerType = referrerType;\n      state.shouldSave = shouldSave;\n    },\n  },\n});\n\nexport const { clearCoverLetter, updateCoverLetter } = coverLetter.actions;\n\nexport default configureStore({\n  reducer: {\n    coverLetter: coverLetter.reducer,\n  },\n});\n","import './loader.sass';\n\nexport default function LoaderDots() {\n  return (\n    <div className=\"loader--dots\">\n      <span />\n      <span />\n      <span />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoaderDots from './loader';\nimport './buttons.sass';\n\nexport interface ButtonAttributes {\n  children?: React.ReactNode\n  className?: string\n  disabled?: boolean\n  href?: string\n  loading?: boolean\n  title?: string\n  type?: 'button' | 'submit' | 'reset'\n  onClick?: () => void\n}\n\nexport function Button({\n  title, href, children, className = '', ...props\n}: ButtonAttributes) {\n  if (href) {\n    return (\n      <Link to={href} className={`button ${className}`}>\n        {children}\n      </Link>\n    );\n  }\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button title={title} className={`button ${className}`} {...props}>\n      {children}\n    </button>\n  );\n}\n\nexport function ButtonSuccess({\n  children, className = '', ...props\n}: ButtonAttributes) {\n  return (\n    <Button className={`button--success ${className}`} {...props}>\n      {children}\n    </Button>\n  );\n}\n\nexport function ButtonSubmit({\n  children, disabled, loading, ...props\n}: ButtonAttributes) {\n  return (\n    <ButtonSuccess\n      type=\"submit\"\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? <LoaderDots /> : children}\n    </ButtonSuccess>\n  );\n}\n","type LocalStorageData = {\n  key: string\n  value: unknown\n}\n\nexport const setItem = (key: string, value: unknown) => {\n  const data = JSON.stringify({ key, value });\n  return localStorage.setItem(key, data);\n};\n\nexport const hasItem = (key: string) => !!localStorage.getItem(key);\n\nexport function getItem<S = undefined>(key: string): S | null {\n  const value = localStorage.getItem(key);\n  if (!value) return null;\n\n  const data: LocalStorageData = JSON.parse(value);\n  return data.value as S;\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Button } from '../components/primitives/buttons';\nimport {\n  clearCoverLetter, CoverLetter, initialState, State,\n} from '../store';\nimport { setItem } from '../utils/local-storage';\nimport './CoverLetter.sass';\n\nfunction Title({ coverLetter: { position } }: { coverLetter: CoverLetter }) {\n  return (\n    <section className=\"app__title\">\n      <h1>Antonio Okoro</h1>\n      <h2>RE: <strong>{position}</strong></h2>\n    </section>\n  );\n}\n\nfunction Address() {\n  return (\n    <address className=\"app__address\">\n      <p>+2348105844849</p>\n      <p>cheezytony1@gmail.com</p>\n      <p>\n        Lagos, Nigeria\n      </p>\n    </address>\n  );\n}\n\nfunction Salutation({ coverLetter: { recipient } }: { coverLetter: CoverLetter }) {\n  return (\n    <section className=\"app__salutation\">\n      <h3>Dear <strong>{recipient}</strong>,</h3>\n    </section>\n  );\n}\n\n// function Greeting() {\n//   return (\n//     <section className=\"app__greeting\">\n//       <p>\n//         Lorem ipsum dolor sit, amet consectetur adipisicing elit.\n//         Ipsa, rem dolorum officiis molestias, ipsam libero porro eveniet,\n//         doloremque harum assumenda eos error aperiam.\n//         Ullam corrupti voluptates est reiciendis tempora facilis!\n//       </p>\n//     </section>\n//   );\n// }\n\nfunction Opener(\n  { coverLetter: { position, referrer, referrerType } }: { coverLetter: CoverLetter },\n) {\n  const renderReferrer = () => {\n    switch (referrerType) {\n      case 'Job Listing':\n        return `, which I saw advertised on the ${referrer} website. `;\n      case 'Recruiter':\n        return `, after being recruited by ${referrer}. `;\n      default:\n        return '. ';\n    }\n  };\n\n  return (\n    <section>\n      <p>\n        I&apos;m applying for the {position} position{renderReferrer()}\n        I believe I meet all the essential criteria for the role and feel\n        I can make an effective and immediate contribution to your team.\n      </p>\n    </section>\n  );\n}\n\nfunction Body({ coverLetter: { currentPosition, currentEmployer } }: { coverLetter: CoverLetter }) {\n  return (\n    <section>\n      <p>\n        In my {currentPosition} position with {currentEmployer},\n        I handled tasks very similar to what you outlined in your job ad.\n        With my ability to learn, I know I can quickly close any knowledge\n        gaps to become an asset to your team.\n      </p>\n      <p>\n        I have effective communication skills and the motivation to take on challenging work.\n        I am confident that I have the drive, knowledge and experience you need.\n      </p>\n    </section>\n  );\n}\n\nfunction Closer({ coverLetter: { companyName } }: { coverLetter: CoverLetter }) {\n  return (\n    <section>\n      <p>\n        Thank you for your time. It would be a pleasure to speak with you and discuss\n        this opportunity with {companyName}. I look forward to hearing from you soon.\n      </p>\n    </section>\n  );\n}\n\nfunction Signature() {\n  return (\n    <section className=\"app__signature\">\n      <p>\n        Sincerely.\n      </p>\n      <p>\n        Antonio Okoro.\n      </p>\n    </section>\n  );\n}\n\nexport default function CoverLetterPage() {\n  const coverLetter = useSelector((state: State) => state.coverLetter);\n  const dispatch = useDispatch();\n\n  const resetCoverLetter = () => {\n    dispatch(clearCoverLetter());\n    setItem('cover-letter-data', initialState);\n  };\n\n  const print = () => window.print();\n\n  return (\n    <article>\n      <header className=\"app__header\">\n        <Address />\n        <Title coverLetter={coverLetter} />\n      </header>\n      <main>\n        <Salutation coverLetter={coverLetter} />\n        {/* <Greeting /> */}\n        <Opener coverLetter={coverLetter} />\n        <Body coverLetter={coverLetter} />\n        <Closer coverLetter={coverLetter} />\n        <Signature />\n      </main>\n      <footer>\n        <div className=\"buttons\">\n          <Button href=\"/edit\">\n            Edit Cover Letter\n          </Button>\n          <Button onClick={() => print()}>\n            Print\n          </Button>\n          <Button onClick={() => resetCoverLetter()}>\n            Reset\n          </Button>\n        </div>\n      </footer>\n    </article>\n  );\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  FormHTMLAttributes, HTMLAttributes, LabelHTMLAttributes, useEffect, useRef,\n} from 'react';\nimport { InputValue } from './input';\nimport './form.sass';\n\nexport interface FormGroupInterface extends HTMLAttributes<HTMLDivElement> {\n  field?: FormField\n  value?: InputValue\n}\n\nexport interface FormInterface extends FormHTMLAttributes<HTMLFormElement> {\n}\n\nexport type FormField = {\n  errors: FormValidationErrors\n  name: string\n  rules: FormValidationRuleName[]\n  touched: boolean\n  valid: boolean\n  value: InputValue\n}\n\nexport type FormFields = {\n  [key: string]: FormField\n}\n\nexport type FormFieldsUpdateParam = {\n  [key: string]: {\n    rules?: FormValidationRuleName[],\n    value: InputValue\n  }\n}\n\nexport type FormFieldParam = {\n  rules?: FormValidationRuleName[],\n  value: InputValue\n}\n\nexport type FormFieldParams = {\n  [key: string]: FormFieldParam\n}\n\nexport type FormState = {\n  fields: FormFields\n  loading: boolean\n  touched: boolean\n  valid: boolean\n}\n\nexport type FormValidationErrors = {\n  [key: string]: string\n}\n\nexport type FormValidationRuleName = 'required' | 'nullable' | `requiredIf:${string},${string}`\n  | `minCharacters:${number}` | `maxCharacters:${number}` | `exactCharacters:${number}`\n  | `greaterThan:${number}` | `lessThan:${number}` | `equalTo:${number}`\n  | `laterThan:${string}` | `earlierThan:${string}` | `on:${string}`\n  | 'numbers' | 'alphabets' | 'alhabetsNumbers' | 'alphabetsNumbersSpecialCharacters';\n\nexport type FormValidationRule = {\n  // eslint-disable-next-line no-unused-vars\n  test: (value: InputValue, args: string, field: FormField) => boolean\n  // eslint-disable-next-line no-unused-vars\n  message: (value: InputValue, args: string, field: FormField) => string\n}\n\nexport type FormValidationRules = {\n  [key: string]: FormValidationRule\n}\n\nexport type FormValues = {\n  [key: string]: InputValue\n}\n\nexport const validationRules: FormValidationRules = {\n  nullable: {\n    test: () => true,\n    message: () => '',\n  },\n  required: {\n    test: (value) => !!value,\n    message: () => 'this field is required',\n  },\n};\n\nexport const createForm = (formFields: FormFieldParams) => {\n  const fields: FormFields = {};\n  Object.keys(formFields).forEach((name) => {\n    const field = formFields[name];\n    fields[name] = {\n      ...field,\n      name,\n      rules: field.rules || ['required'],\n      errors: {},\n      touched: false,\n      valid: false,\n    };\n  });\n\n  const form: FormState = {\n    fields,\n    loading: false,\n    touched: false,\n    valid: false,\n  };\n\n  return form;\n};\n\nexport const getFormValues = ({ fields }: FormState) => {\n  const values: FormValues = {};\n  Object.keys(fields).forEach((key) => {\n    values[key] = fields[key].value;\n  });\n  return values;\n};\n\nexport const updateField = (form: FormState, name: string, value: InputValue): FormState => {\n  const field = form.fields[name];\n  if (!field) {\n    throw new Error(`Unknown field ${name} in field list`);\n  }\n\n  const validatedField = validateField({\n    ...field,\n    touched: true,\n    value,\n  });\n\n  return {\n    ...form,\n    fields: {\n      ...form.fields,\n      [name]: validatedField,\n    },\n  };\n};\n\nexport const updateFields = (form: FormState, fields: FormFieldsUpdateParam): FormState => {\n  // Create a map of fields to update.\n  const updatedFields: FormFields = {};\n  // Loop through provided fields.\n  Object.keys(fields).forEach((name) => {\n    // Get current field.\n    const field = fields[name];\n    // Find current field in form.\n    const formField = form.fields[name];\n    // Throw an error if the specified field doesn't exist in the form.\n    if (!formField) {\n      throw new Error(`Unkown field ${name} in form`);\n    }\n    // Add updated field to the map.\n    updatedFields[name] = {\n      ...formField,\n      ...field,\n    };\n  });\n  // Return an updated form with the updated fields.\n  return {\n    ...form,\n    fields: {\n      ...form.fields,\n      ...updatedFields,\n    },\n  };\n};\n\nexport const validateField = (field: FormField): FormField => {\n  // Define new errors.\n  const errors: FormValidationErrors = {};\n  // Define field validity.\n  let isValid = true;\n  // Process all rules.\n  field.rules.forEach((rule) => {\n    // Split the rule to get the rule name and arguments.\n    const [ruleName, ruleArguments] = rule.split(':');\n    // Find the chosen rule from the rule database.\n    const validationRule = validationRules[ruleName];\n    // Determine rule validity.\n    const isRuleValid = validationRule.test(field.value, ruleArguments, field);\n    // If rule is invalid get the error message and append to error bad.\n    if (!isRuleValid) {\n      errors[ruleName] = validationRule.message(field.value, ruleArguments, field);\n      // Set the field validity to false\n      isValid = false;\n    }\n  });\n  // Return a new field with the same origin properties and current errors and validity.\n  return {\n    ...field,\n    errors,\n    valid: isValid,\n  };\n};\n\nexport const valdiateForm = (form: FormState): FormState => {\n  // Duplication instance of the form to avoid 'no-param-reassign' error.\n  const validatedForm = { ...form, valid: true };\n\n  // Loop through all fields.\n  Object.keys(form.fields).forEach((name) => {\n    // Get current field.\n    const field = form.fields[name];\n    // Validate current field.\n    const validatedField = validateField(field);\n    // Updated validated field on the form.\n    validatedForm.fields[name] = validatedField;\n    // Set the validity of the form.\n    // If the form validity is currently false, it remains false.\n    validatedForm.valid = validatedForm.valid ? validatedField.valid : false;\n  });\n\n  return validatedForm;\n};\n\nexport function Form({ children, onSubmit, ...props }: FormInterface) {\n  const formRef = useRef<HTMLFormElement>(null);\n\n  useEffect(() => {\n    // console.log(formRef);\n  });\n\n  return (\n    <form className=\"form\" ref={formRef} onSubmit={onSubmit} {...props}>\n      {children}\n    </form>\n  );\n}\n\nexport function FormGroup({ children, field }: FormGroupInterface) {\n  const { errors } = field || {};\n\n  return (\n    <div className=\"form__group\">\n      {children}\n      <ul className=\"form__group__errors\">\n        {errors && Object.keys(errors).map((key) => (\n          <li key={key}>{errors[key]}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport function FormLabel({ children, ...props }: LabelHTMLAttributes<HTMLLabelElement>) {\n  return (\n    <label className=\"form__label\" {...props}>\n      {children}\n    </label>\n  );\n}\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { InputHTMLAttributes, useEffect, useState } from 'react';\n\nexport type InputSelectOption = {\n  title: string\n  value: InputValue\n}\n\nexport interface InputSelectInterface {\n  options?: InputSelectOption[]\n  placeholder?: string\n  name?: string\n  id?: string\n  className?: string\n  value?: InputValue\n  // eslint-disable-next-line no-unused-vars\n  onChange?: (value: InputValue) => void\n}\n\nexport type InputValue = string | number | boolean | null;\n\nexport function Input({\n  type = 'text', className = '', ...otherProps\n}: InputHTMLAttributes<HTMLInputElement>) {\n  return (\n    <input\n      type={type}\n      className={`form__input ${className}`}\n      {...otherProps}\n    />\n  );\n}\n\nexport function InputSelect({\n  className = '', id, placeholder, value, options = [], onChange = () => { },\n}: InputSelectInterface) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<InputSelectOption>();\n  const selectOption = (option: InputSelectOption) => {\n    setSelectedOption(option);\n    setIsOpen(false);\n    onChange(option?.value);\n  };\n\n  useEffect(() => {\n    const option = options.find((op) => op.value === value);\n    setSelectedOption(option);\n  }, [value]);\n\n  return (\n    <div\n      className={\n        'form__input form__input__select'\n        + `${isOpen ? ' form__input--is-focused form__input__select--is-open' : ''}`\n        + `${selectedOption ? ' form__input__select--has-value' : ''}`\n        + ` ${className}`\n      }\n    >\n      <label>\n        <input type=\"checkbox\" id={id} onChange={() => setIsOpen(!isOpen)} />\n        <span>{selectedOption?.title || placeholder}</span>\n      </label>\n      <ul className=\"form__input__select__options\">\n        {options.map((option: InputSelectOption) => (\n          <li key={option.title} className={option === selectedOption ? 'selected' : ''}>\n            <span\n              role=\"listitem\"\n              onClick={() => selectOption(option)}\n              onKeyDown={() => { }}\n            >\n              {option.title}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport function InputCheckbox({\n  checked, children, id, name, onChange = () => { },\n}: InputHTMLAttributes<HTMLInputElement>) {\n  return (\n    <label className=\"form__input__checkbox\" htmlFor={id}>\n      <input type=\"checkbox\" name={name} id={id} checked={checked} onChange={onChange} />\n      <span>\n        <span>\n          <span />\n        </span>\n        <span>\n          {children}\n        </span>\n      </span>\n    </label>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport {\n  createForm, Form, FormGroup, FormLabel, getFormValues,\n  updateField, updateFields, valdiateForm,\n} from '../components/primitives/form';\nimport {\n  Input, InputSelect, InputSelectOption, InputCheckbox,\n} from '../components/primitives/input';\nimport { Button, ButtonSubmit } from '../components/primitives/buttons';\nimport { setItem } from '../utils/local-storage';\nimport { State, updateCoverLetter } from '../store';\nimport './Edit.sass';\n\nexport default function Edit() {\n  const coverLetter = useSelector((state: State) => state.coverLetter);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [form, updateForm] = useState(createForm({\n    position: { value: '' },\n    companyName: { value: '' },\n    recipientType: { value: '' },\n    recipient: { value: '' },\n    currentPosition: { value: '' },\n    currentEmployer: { value: '' },\n    referrer: { value: '', rules: ['nullable'] },\n    referrerType: { value: '', rules: ['nullable'] },\n    shouldSave: {\n      rules: ['nullable'],\n      value: false,\n    },\n  }));\n\n  const recipientOptions: InputSelectOption[] = [{\n    title: 'Select Option', value: '',\n  }, {\n    title: 'Sir', value: 'Sir',\n  }, {\n    title: 'Ma', value: 'Ma',\n  }, {\n    title: 'Hiring Manager', value: 'Hiring Manager',\n  }, {\n    title: 'Hiring Manager\\'s Name', value: 'name',\n  }];\n\n  const referrerOptions: InputSelectOption[] = [{\n    title: 'Select Option', value: '',\n  }, {\n    title: 'Job Listing', value: 'Job Listing',\n  }, {\n    title: 'Recruiter', value: 'Recruiter',\n  }];\n\n  const submitData = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const validatedForm = valdiateForm(form);\n    updateForm(validatedForm);\n\n    if (!validatedForm.valid) {\n      return;\n    }\n\n    const data = getFormValues(form);\n\n    dispatch(updateCoverLetter(data));\n\n    if (form.fields.shouldSave.value) {\n      setItem('cover-letter-data', data);\n    }\n\n    history.push('/');\n  };\n\n  useEffect(() => {\n    updateForm(updateFields(form, {\n      position: { value: coverLetter.position },\n      companyName: { value: coverLetter.companyName },\n      recipientType: { value: coverLetter.recipientType },\n      recipient: { value: coverLetter.recipient },\n      currentPosition: { value: coverLetter.currentPosition },\n      currentEmployer: { value: coverLetter.currentEmployer },\n      referrer: { value: coverLetter.referrer },\n      referrerType: { value: coverLetter.referrerType },\n      shouldSave: { value: coverLetter.shouldSave },\n    }));\n  }, [coverLetter]);\n\n  return (\n    <article className=\"app__edit\">\n      <main>\n        <h1>Edit Cover Letter</h1>\n        <h2>Set the parameters for the cover letter content.</h2>\n        <Form name=\"editForm\" onSubmit={submitData}>\n          <div>\n            <FormGroup field={form.fields.position}>\n              <FormLabel htmlFor=\"position\">Target Position</FormLabel>\n              <Input\n                id=\"position\"\n                placeholder=\"e.g. Senior Backend Developer\"\n                value={form.fields.position.value as string}\n                onChange={(event) => updateForm(updateField(form, 'position', event.target.value))}\n              />\n            </FormGroup>\n            <FormGroup field={form.fields.companyName}>\n              <FormLabel htmlFor=\"companyName\">Target Company</FormLabel>\n              <Input\n                id=\"companyName\"\n                placeholder=\"e.g. CredPal\"\n                value={form.fields.companyName.value as string}\n                onChange={(event) => updateForm(updateField(form, 'companyName', event.target.value))}\n              />\n            </FormGroup>\n\n            <FormGroup field={form.fields.currentEmployer}>\n              <FormLabel htmlFor=\"currentEmployer\">Current Company</FormLabel>\n              <Input\n                id=\"currentEmployer\"\n                placeholder=\"e.g. CredPal\"\n                value={form.fields.currentEmployer.value as string}\n                onChange={(event) => updateForm(updateField(form, 'currentEmployer', event.target.value))}\n              />\n            </FormGroup>\n            <FormGroup field={form.fields.currentPosition}>\n              <FormLabel htmlFor=\"currentPosition\">Current Position</FormLabel>\n              <Input\n                id=\"currentPosition\"\n                placeholder=\"e.g. Full Stack Developer\"\n                value={form.fields.currentPosition.value as string}\n                onChange={(event) => updateForm(updateField(form, 'currentPosition', event.target.value))}\n              />\n            </FormGroup>\n\n            <FormGroup field={form.fields.recipientType}>\n              <FormLabel htmlFor=\"recipientType\">Recipient</FormLabel>\n              <InputSelect\n                id=\"recipientType\"\n                name=\"recipient\"\n                options={recipientOptions}\n                placeholder=\"e.g. Hiring Manager\"\n                value={form.fields.recipientType.value}\n                onChange={(value) => {\n                  const newForm = updateField(form, 'recipientType', value);\n                  updateForm(newForm);\n                  updateForm(updateField(newForm, 'recipient', value !== 'name' ? value : ''));\n                }}\n              />\n            </FormGroup>\n            {\n              form.fields.recipientType?.value === 'name' && (\n                <FormGroup field={form.fields.recipient}>\n                  <FormLabel htmlFor=\"recipient\">Hiring Manager Name</FormLabel>\n                  <Input\n                    id=\"recipient\"\n                    name=\"recipient\"\n                    placeholder=\"e.g. Oiza Yekini\"\n                    value={form.fields.recipient.value as string}\n                    onChange={(event) => updateForm(updateField(form, 'recipient', event.target.value))}\n                  />\n                </FormGroup>\n              )\n            }\n\n            <FormGroup field={form.fields.referrerType}>\n              <FormLabel htmlFor=\"referrerType\">Referrer Type</FormLabel>\n              <InputSelect\n                id=\"referrerType\"\n                name=\"recipient\"\n                options={referrerOptions}\n                placeholder=\"e.g. Job Listing\"\n                value={form.fields.referrerType.value}\n                onChange={(value) => {\n                  updateForm(updateField(form, 'referrerType', value));\n                }}\n              />\n            </FormGroup>\n            <FormGroup field={form.fields.referrer}>\n              <FormLabel htmlFor=\"referrer\">Referrer</FormLabel>\n              <Input\n                id=\"referrer\"\n                placeholder=\"e.g. RemoteOk.io\"\n                value={form.fields.referrer.value as string}\n                onChange={(event) => updateForm(updateField(form, 'referrer', event.target.value))}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <InputCheckbox\n                checked={form.fields.shouldSave.value as boolean}\n                onChange={(event) => updateForm(updateField(form, 'shouldSave', event.target.checked))}\n              >\n                Save data to local storage?\n              </InputCheckbox>\n            </FormGroup>\n          </div>\n          <div />\n          <div>\n            <div className=\"buttons\">\n              <ButtonSubmit>\n                Update Cover Letter\n              </ButtonSubmit>\n              <Button href=\"/\">\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Form>\n      </main>\n    </article>\n  );\n}\n","import './Invoice.sass';\n\n// type InvoiceItem = {\n//   title: string\n//   price: number\n//   quantity: number\n// }\n\n// type PaymentInformation = {\n//   downPayment?: {\n//     percentage: number\n//     date: string\n//   }\n//   source?: {\n//     title: string\n//   }\n//   target: {\n//     bankName: string,\n//     accountNumber: string\n//   }\n// }\n\nexport default function Invoice() {\n  // const items: InvoiceItem[] = [{\n  //   title: 'Web Development',\n  //   price: 30000,\n  //   quantity: 1,\n  // }];\n\n  // const payment: PaymentInformation = {\n  //   downPayment: {\n  //     percentage: 40,\n  //     date: 'immediately',\n  //   },\n  //   source: {\n  //     title: 'Trifta Technologies Limited',\n  //   },\n  //   target: {\n  //     bankName: 'Access Bank',\n  //     accountNumber: '0825909821',\n  //   },\n  // };\n\n  // console.log(items, payment);\n\n  return (\n    <article>\n      <header>\n        <section>\n          <h1>Antonio Okoro</h1>\n          <h2>Software Engineer</h2>\n        </section>\n        <section>\n          <h3>Bill To</h3>\n        </section>\n        <section>\n          <h3>Payment To Be Made To</h3>\n        </section>\n      </header>\n      <main>\n        {/*  */}\n      </main>\n      <footer>\n        {/*  */}\n      </footer>\n    </article>\n  );\n}\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport CoverLetterPage from './pages/CoverLetter';\nimport Edit from './pages/Edit';\nimport Invoice from './pages/Invoice';\nimport './App.sass';\nimport { getItem } from './utils/local-storage';\nimport { CoverLetter, updateCoverLetter } from './store';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const data = getItem<CoverLetter>('cover-letter-data');\n\n  if (data && data.companyName && data.position) {\n    dispatch(updateCoverLetter(data));\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <CoverLetterPage />\n            </Route>\n            <Route path=\"/edit\">\n              <Edit />\n            </Route>\n            <Route path=\"/invoice\">\n              <Invoice />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}